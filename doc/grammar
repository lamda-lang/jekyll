Module = ( <_> | DefinitionAll | Use | Import )*
DefinitionAll = (Definition | Function)
Definition = Variable <_*> <'='> <_*> Expression [<_+> Where]
Signature = Variable <'('> <_*> Args <_*> <')'>
Function = Signature <_*> <'='> <_*> Expression [<_+> Where]
Keyword = 'nil' | 'true' | 'false' | 'when' | 'case' | 'do' | 'if' | 'end' | 'use' | 'import' | 'only' | 'hide' | 'type'
Variable = !Keyword #'[A-Za-z_]\w*'
Expressions = (Expression <_+>)* Expression
Expression = Token | Range | Integer | String | Nil | Boolean | Result | Lamda | List | Map | Set | Variable | When | Case | Property | Subscript | Float | Do | ListComprehension | SetComprehension | MapComprehension | Type | Protocol
KeyValues = (KeyValue <_+>)* KeyValue
KeyValue = Expression <_*> <':'> <_*> Expression
Result = ( Variable | Result | Lamda ) <'('>  <_*> [Expressions <_*>] <')'>
Lamda = <'('> <_*> Args <':'> <_*> Expression <_*> <')'>
Where = <'where'> <_+> (DefinitionAll <_*>)* <'end'>
When = <'when'> <_+> (KeyValue <_*>)* <'end'>
Case = <'case'> <_+> Variable <_+> (Expression [<_+> Guard] <_*> <':'> <_*> Expression <_*>)* <'end'>
Property = Expression <'.'> Expression
Guard = <'if'> <_+> Expressions
Subscript = Expression <'['> <_*> Expression <_*> <']'>
Do = <'do'> <_+> (DefinitionAll <_*>)*  <'end'>
Branch = Guard <_*> <'='> <_*> Expression
Namespace = (Variable <'.'>)* Variable
Use = <'use'> <_+> Namespace [<_+> ('only'|'hide') (<_+> Variable)+ ]
Import = <'import'> <_+> Namespace [<_+> 'as' <_+> Variable ]
ListComprehension = <'['> <_*> Expression <_+> <'for'> <_+> KeyValue [<_+> Guard] <_*> <']'>
MapComprehension = <'{'> <_*> KeyValue <_+> <'for'> <_+> KeyValue [<_+> Guard] <_*> <'}'>
SetComprehension = <'('> <_*> Expression <_+> <'for'> <_+> KeyValue [<_+> Guard] <_*> <')'>
Args = (Variable <_*>)*
Float = #'-?\d+\.\d+'
Range = ( Expression | Epsilon ) '..' ( Expression | Epsilon )
Integer = #'-?\d+'
String = <'\"'> #'[^"]*' <'\"'>
Token = <'#'> #'\w+'
Nil = <'nil'>
Boolean = 'true' | 'false'
List = <'['> [<_*> Expressions] <_*> <']'>
Map =  <'{'> [<_*> KeyValues] <_*> <'}'>
Set =  <'('> [<_*> Expressions] <_*> <')'>
Type = <'type'> <_*> (Variable <_*>)+ <'end'>
Protocol = <'protocol'> <_*> (Signature <_*>)+ <'end'>
_ = #'\s'
